syntax = "proto3";

package server.account.interface.v1;

option go_package = "api/server/account/interface/v1;interfacev1";

import "google/api/annotations.proto";

// Account service
// Open to public network
// Provide HTTP and gRPC interfaces
service AccountInterface {
  // Connection test
  rpc DevPing (DevPingRequest) returns (DevPingResponse) {
    option (google.api.http) = {
      get: "/v1/dev/ping"
    };
  }

  // Register
  rpc Register (RegisterRequest) returns (RegisterResponse) {
    option (google.api.http) = {
      post: "/v1/register"
      body: "*"
    };
  }
  // Login
  rpc Login (LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/v1/login"
      body: "*"
    };
  }
  // Session renewal
  rpc Refresh (RefreshRequest) returns (RefreshResponse) {
    option (google.api.http) = {
      post: "/v1/refresh"
      body: "*"
    };
  }
  // Get TCP handshake token
  rpc Token (TokenRequest) returns (TokenResponse) {
    option (google.api.http) = {
      post: "/v1/token"
      body: "*"
    };
  }

  // Apple login
  rpc AppleLogin (AppleLoginRequest) returns (AppleLoginResponse) {
    option (google.api.http) = {
      post: "/v1/apple/login"
      body: "*"
    };
  }

  // Apple login callback
  rpc AppleLoginCallback (AppleLoginCallbackRequest) returns (AppleLoginCallbackResponse) {
    option (google.api.http) = {
      post: "/v1/apple/login/callback"
      body: "*"
    };
  }

  // Google login
  rpc GoogleLogin (GoogleLoginRequest) returns (GoogleLoginResponse) {
    option (google.api.http) = {
      post: "/v1/google/login"
      body: "*"
    };
  }

  // Facebook login
  rpc FacebookLogin (FacebookLoginRequest) returns (FacebookLoginResponse) {
    option (google.api.http) = {
      post: "/v1/fb/login"
      body: "*"
    };
  }

}

message DevPingRequest {
  string message = 1;
}

message DevPingResponse {
  string message = 1;
  string time = 2;
}

message RegisterRequest {
  string name = 1; // Account name, player fills in
  string password = 2; // Password
  string color = 3;
}

message RegisterResponse {
  Code code = 1; // Response code
  enum Code {
    CODE_ERR_UNSPECIFIED = 0; // Please try again later
    CODE_SUCCESS = 1; // Success
    CODE_ERR_CREATED = 2; // Already registered
    CODE_ERR_NAME = 3; // Account name format error, temporarily length 6-18
    CODE_ERR_PWD = 4;  // Password format error, temporarily length 6-18
  }

  string account_id = 2; // Account ID
  string session = 3; // Account login session
  int64  session_timeout = 4; // Session timeout (unix timestamp)
  string token = 5; // TCP handshake token
  int64  token_timeout = 6; // Token timeout
}

message LoginRequest {
  string name = 1; // Account name
  string password = 2;
  string color = 3;
}

message LoginResponse {
  Code code = 1; // Response code
  enum Code {
    CODE_ERR_UNSPECIFIED = 0; // Please try again later
    CODE_SUCCESS = 1; // Success
    CODE_ERR_ACCOUNT = 2; // Account does not exist
    CODE_ERR_PASSWORD = 3; // Password error
  }

  string account_id = 2; // Account ID. The unique ID of the account generated by the server
  string session = 3; // Account login session
  int64  session_timeout = 4; // Session timeout (unix timestamp)
  string token = 5; // TCP handshake token
  int64  token_timeout = 6; // Token timeout (unix timestamp)
}

message RefreshRequest {
  string account_id = 1; // Account ID
  string session = 2; // Existing session
}

message RefreshResponse {
  Code code = 1; // Response code
  enum Code {
    CODE_ERR_UNSPECIFIED = 0; // Please try again later
    CODE_SUCCESS = 1; // Success
    CODE_ERR_ACCOUNT = 2; // Account does not exist
    CODE_ERR_SESSION_EXPIRED = 3; // Session expired
    CODE_ERR_SESSION_ILLEGAL = 4; // Session error
  }

  string session = 2; // New session
  int64  session_timeout = 3; // New session timeout (unix timestamp)
}

message TokenRequest {
  string account_id = 1; // Account ID
  string session = 2; // Existing session
  string color = 3;
}

message TokenResponse {
  Code code = 1; // Response code
  enum Code {
    CODE_ERR_UNSPECIFIED = 0; // Please try again later
    CODE_SUCCESS = 1; // Success
    CODE_ERR_ACCOUNT = 2; // Account does not exist
    CODE_ERR_SESSION_EXPIRED = 3; // Session expired
    CODE_ERR_SESSION_ILLEGAL = 4; // Session error
  }

  string token = 2; // TCP handshake token
  int64 token_timeout = 3; // Token timeout (unix timestamp)
  string session = 4; // New session
  int64  session_timeout = 5; // New session timeout (unix timestamp)
}

message Session {
  int64 account_id = 1;
  int64 timeout = 2; // timeout (unix timestamp)
  string key = 3;
}

message AppleLoginRequest {
  string token = 1; // Apple token
  string apple_id = 2;
  string code = 3;
  string color = 4;
}

message AppleLoginResponse {
  Code code = 1; // Response code
  enum Code {
    CODE_ERR_UNSPECIFIED = 0; // Please try again later
    CODE_SUCCESS = 1; // Success
    CODE_ERR_TOKEN = 2; // Token error
    CODE_ERR_APPLE_ID = 3; // Apple ID error
  }

  LoginInfo info = 2; // Login information
}


message AppleLoginCallbackRequest {
  message User {
    string email = 1;
    message Name {
      string first_name = 1;
      string last_name = 2;
    }
    Name name = 2;
  }

  string code = 1;
  string id_token = 2;
  string state = 3;
  string user = 4;
  string error = 5;
}

message AppleLoginCallbackResponse {
  Code code = 1; // Response code
  enum Code {
    CODE_ERR_UNSPECIFIED = 0; // Other errors
    CODE_ERR_TOKEN = 2; // Token verification error
    CODE_ERR_CODE = 3; // Code verification error
    CODE_ERR_PARAM = 4; // Apple parameter error
    CODE_ERR_APPLE = 6; // Apple callback error
  }
}


message GoogleLoginRequest {
  string token = 1; // Google token
  string color = 2;
}

message GoogleLoginResponse {
  Code code = 1; // Response code
  enum Code {
    CODE_ERR_UNSPECIFIED = 0; // Please try again later
    CODE_SUCCESS = 1; // Success
    CODE_ERR_TOKEN = 2; // Token error
  }

  LoginInfo info = 2; // Login information
}



message FacebookLoginRequest {
  string token = 1; // Facebook access_token
  string color = 2;
}

message FacebookLoginResponse {
  Code code = 1; // Response code
  enum Code {
    CODE_ERR_UNSPECIFIED = 0; // Please try again later
    CODE_SUCCESS = 1; // Success
    CODE_ERR_TOKEN = 2; // Token error
  }

  LoginInfo info = 2; // Login information
}

message AppleId {
  string apple_id = 1;
  string state = 2;
  int64 t = 3;
}

message LoginInfo {
  string account_id = 1; // Account ID. The unique ID of the account generated by the server
  bool register = 2; // Whether the account is registered
  string token = 3; // TCP handshake token
  int64  token_timeout = 4; // Token timeout (unix timestamp)
  string session = 5; // New session
  int64  session_timeout = 6; // New session timeout (unix timestamp)
  string state = 7; // State random string for replay attack prevention
}
